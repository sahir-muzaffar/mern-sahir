{"ast":null,"code":"import { FETCH_ALL, FETCH_BY_SEARCH, START_LOADING, END_LOADING, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    console.log(data);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/sahirmuzaffar/Desktop/mern/client/src/actions/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","START_LOADING","END_LOADING","CREATE","UPDATE","DELETE","LIKE","api","getPosts","page","dispatch","type","data","fetchPosts","console","log","payload","error","message","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","likePost","deletePost"],"mappings":"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","sourcesContent":["import { FETCH_ALL,FETCH_BY_SEARCH ,START_LOADING,END_LOADING,CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\n\nimport * as api from '../api/index.js';\n\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING})\n    const { data } = await api.fetchPosts(page);\n    console.log(data);\n\n    dispatch({ type: FETCH_ALL, payload: data });\n    dispatch({ type: END_LOADING})\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\nexport const getPostsBySearch = (searchQuery)=>async(dispatch)=>{\n\n  try {\n    dispatch({ type: START_LOADING})\n    const {data: {data}}= await api.fetchPostsBySearch(searchQuery);\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\n    dispatch({ type: END_LOADING})\n  } \n  catch (error) {\n    console.log(error)\n    \n  }\n\n}\n\n\nexport const createPost = (post) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING})\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: CREATE, payload: data });\n    dispatch({ type: END_LOADING})\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}